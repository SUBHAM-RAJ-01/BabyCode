{"ast":null,"code":"import { signInWithEmailAndPassword, signOut, onAuthStateChanged, GoogleAuthProvider, signInWithPopup, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from './firebase';\nimport { toast } from 'react-toastify';\n\n// Email/Password Login\nexport const login = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return userCredential.user;\n  } catch (error) {\n    throw new Error(getFirebaseErrorMessage(error.code));\n  }\n};\n\n// Google Sign-In\nexport const loginWithGoogle = async () => {\n  const provider = new GoogleAuthProvider();\n  try {\n    const result = await signInWithPopup(auth, provider);\n    return result.user;\n  } catch (error) {\n    throw new Error(getFirebaseErrorMessage(error.code));\n  }\n};\n\n// User Registration\nexport const register = async (email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    toast.success('Account created successfully!');\n    return userCredential.user;\n  } catch (error) {\n    throw new Error(getFirebaseErrorMessage(error.code));\n  }\n};\n\n// Logout\nexport const logout = async () => {\n  try {\n    await signOut(auth);\n    toast.success('Logged out successfully');\n  } catch (error) {\n    throw new Error(getFirebaseErrorMessage(error.code));\n  }\n};\n\n// Auth State Listener\nexport const onAuthChange = callback => {\n  return onAuthStateChanged(auth, user => {\n    callback(user);\n  });\n};\n\n// Enhanced Error Handling\nconst getFirebaseErrorMessage = code => {\n  switch (code) {\n    // Email/Password Errors\n    case 'auth/invalid-email':\n      return 'Invalid email address format';\n    case 'auth/user-disabled':\n      return 'This account has been disabled';\n    case 'auth/user-not-found':\n      return 'No account found with this email';\n    case 'auth/wrong-password':\n      return 'Incorrect password';\n    case 'auth/email-already-in-use':\n      return 'This email is already registered';\n    case 'auth/weak-password':\n      return 'Password should be at least 6 characters';\n\n    // Google OAuth Errors\n    case 'auth/popup-closed-by-user':\n      return 'Google sign-in was cancelled';\n    case 'auth/account-exists-with-different-credential':\n      return 'Account already exists with different login method';\n\n    // Common Errors\n    case 'auth/network-request-failed':\n      return 'Network error. Please check your connection';\n    case 'auth/too-many-requests':\n      return 'Too many attempts. Try again later';\n    default:\n      console.warn('Unhandled auth error:', code);\n      return 'Authentication failed. Please try again';\n  }\n};\n\n// Auto-create test users in development\nif (import.meta.env.MODE === 'development') {\n  const testUsers = [{\n    email: 'admin@school.com',\n    password: 'Admin@123'\n  }, {\n    email: 'teacher@school.com',\n    password: 'Teach@123'\n  }, {\n    email: 'student@school.com',\n    password: 'Student@123'\n  }];\n  testUsers.forEach(async user => {\n    try {\n      await createUserWithEmailAndPassword(auth, user.email, user.password);\n      console.log(`Test user created: ${user.email}`);\n    } catch (error) {\n      if (error.code !== 'auth/email-already-in-use') {\n        console.error('Error creating test user:', error);\n      }\n    }\n  });\n}","map":{"version":3,"names":["signInWithEmailAndPassword","signOut","onAuthStateChanged","GoogleAuthProvider","signInWithPopup","createUserWithEmailAndPassword","auth","toast","login","email","password","userCredential","user","error","Error","getFirebaseErrorMessage","code","loginWithGoogle","provider","result","register","success","logout","onAuthChange","callback","console","warn","import","meta","env","MODE","testUsers","forEach","log"],"sources":["C:/Users/srajp/Desktop/BabyCode/src/services/auth.js"],"sourcesContent":["import { \r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n  onAuthStateChanged,\r\n  GoogleAuthProvider,\r\n  signInWithPopup,\r\n  createUserWithEmailAndPassword\r\n} from 'firebase/auth';\r\nimport { auth } from './firebase';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Email/Password Login\r\nexport const login = async (email, password) => {\r\n  try {\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    return userCredential.user;\r\n  } catch (error) {\r\n    throw new Error(getFirebaseErrorMessage(error.code));\r\n  }\r\n};\r\n\r\n// Google Sign-In\r\nexport const loginWithGoogle = async () => {\r\n  const provider = new GoogleAuthProvider();\r\n  try {\r\n    const result = await signInWithPopup(auth, provider);\r\n    return result.user;\r\n  } catch (error) {\r\n    throw new Error(getFirebaseErrorMessage(error.code));\r\n  }\r\n};\r\n\r\n// User Registration\r\nexport const register = async (email, password) => {\r\n  try {\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    toast.success('Account created successfully!');\r\n    return userCredential.user;\r\n  } catch (error) {\r\n    throw new Error(getFirebaseErrorMessage(error.code));\r\n  }\r\n};\r\n\r\n// Logout\r\nexport const logout = async () => {\r\n  try {\r\n    await signOut(auth);\r\n    toast.success('Logged out successfully');\r\n  } catch (error) {\r\n    throw new Error(getFirebaseErrorMessage(error.code));\r\n  }\r\n};\r\n\r\n// Auth State Listener\r\nexport const onAuthChange = (callback) => {\r\n  return onAuthStateChanged(auth, (user) => {\r\n    callback(user);\r\n  });\r\n};\r\n\r\n// Enhanced Error Handling\r\nconst getFirebaseErrorMessage = (code) => {\r\n  switch(code) {\r\n    // Email/Password Errors\r\n    case 'auth/invalid-email':\r\n      return 'Invalid email address format';\r\n    case 'auth/user-disabled':\r\n      return 'This account has been disabled';\r\n    case 'auth/user-not-found':\r\n      return 'No account found with this email';\r\n    case 'auth/wrong-password':\r\n      return 'Incorrect password';\r\n    case 'auth/email-already-in-use':\r\n      return 'This email is already registered';\r\n    case 'auth/weak-password':\r\n      return 'Password should be at least 6 characters';\r\n      \r\n    // Google OAuth Errors\r\n    case 'auth/popup-closed-by-user':\r\n      return 'Google sign-in was cancelled';\r\n    case 'auth/account-exists-with-different-credential':\r\n      return 'Account already exists with different login method';\r\n      \r\n    // Common Errors\r\n    case 'auth/network-request-failed':\r\n      return 'Network error. Please check your connection';\r\n    case 'auth/too-many-requests':\r\n      return 'Too many attempts. Try again later';\r\n      \r\n    default:\r\n      console.warn('Unhandled auth error:', code);\r\n      return 'Authentication failed. Please try again';\r\n  }\r\n};\r\n\r\n// Auto-create test users in development\r\nif (import.meta.env.MODE === 'development') {\r\n  const testUsers = [\r\n    { email: 'admin@school.com', password: 'Admin@123' },\r\n    { email: 'teacher@school.com', password: 'Teach@123' },\r\n    { email: 'student@school.com', password: 'Student@123' }\r\n  ];\r\n\r\n  testUsers.forEach(async (user) => {\r\n    try {\r\n      await createUserWithEmailAndPassword(auth, user.email, user.password);\r\n      console.log(`Test user created: ${user.email}`);\r\n    } catch (error) {\r\n      if (error.code !== 'auth/email-already-in-use') {\r\n        console.error('Error creating test user:', error);\r\n      }\r\n    }\r\n  });\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}