{"ast":null,"code":"import { auth } from \"../firebase\";\nimport { signInWithEmailAndPassword, signOut, onAuthStateChanged, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { toast } from \"react-toastify\";\n\n// Email/Password Login\nexport const login = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    if (userCredential.user) {\n      toast.success(\"Login successful!\");\n      return true;\n    }\n    return false;\n  } catch (error) {\n    const errorMessage = getAuthErrorMessage(error.code);\n    toast.error(errorMessage);\n    console.error(\"Login error:\", error);\n    return false;\n  }\n};\n\n// Google Sign-In\nexport const loginWithGoogle = async () => {\n  try {\n    const provider = new GoogleAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    if (result.user) {\n      toast.success(\"Google login successful!\");\n      return true;\n    }\n    return false;\n  } catch (error) {\n    const errorMessage = getAuthErrorMessage(error.code);\n    toast.error(errorMessage);\n    console.error(\"Google sign-in error:\", error);\n    return false;\n  }\n};\n\n// Logout\nexport const logout = async () => {\n  try {\n    await signOut(auth);\n    toast.success(\"Logged out successfully\");\n    return true;\n  } catch (error) {\n    toast.error(\"Logout failed\");\n    console.error(\"Logout error:\", error);\n    return false;\n  }\n};\n\n// Auth State Listener\nexport const onAuthChange = callback => {\n  return onAuthStateChanged(auth, user => {\n    callback(user);\n  });\n};\n\n// Error Message Handler\nconst getAuthErrorMessage = code => {\n  switch (code) {\n    case \"auth/invalid-email\":\n      return \"Invalid email format\";\n    case \"auth/user-disabled\":\n      return \"Account disabled\";\n    case \"auth/user-not-found\":\n      return \"Email not found\";\n    case \"auth/wrong-password\":\n      return \"Incorrect password\";\n    case \"auth/popup-closed-by-user\":\n      return \"Google sign-in cancelled\";\n    case \"auth/account-exists-with-different-credential\":\n      return \"Account exists with different login method\";\n    case \"auth/network-request-failed\":\n      return \"Network error. Check your connection\";\n    case \"auth/too-many-requests\":\n      return \"Too many attempts. Try again later\";\n    default:\n      return \"Authentication failed. Please try again\";\n  }\n};","map":{"version":3,"names":["auth","signInWithEmailAndPassword","signOut","onAuthStateChanged","GoogleAuthProvider","signInWithPopup","toast","login","email","password","userCredential","user","success","error","errorMessage","getAuthErrorMessage","code","console","loginWithGoogle","provider","result","logout","onAuthChange","callback"],"sources":["C:/Users/srajp/Desktop/BabyCode/src/services/auth.js"],"sourcesContent":["import { auth } from \"../firebase\";\r\nimport { \r\n  signInWithEmailAndPassword, \r\n  signOut,\r\n  onAuthStateChanged,\r\n  GoogleAuthProvider,\r\n  signInWithPopup\r\n} from \"firebase/auth\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Email/Password Login\r\nexport const login = async (email, password) => {\r\n  try {\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    if (userCredential.user) {\r\n      toast.success(\"Login successful!\");\r\n      return true;\r\n    }\r\n    return false;\r\n  } catch (error) {\r\n    const errorMessage = getAuthErrorMessage(error.code);\r\n    toast.error(errorMessage);\r\n    console.error(\"Login error:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Google Sign-In\r\nexport const loginWithGoogle = async () => {\r\n  try {\r\n    const provider = new GoogleAuthProvider();\r\n    const result = await signInWithPopup(auth, provider);\r\n    if (result.user) {\r\n      toast.success(\"Google login successful!\");\r\n      return true;\r\n    }\r\n    return false;\r\n  } catch (error) {\r\n    const errorMessage = getAuthErrorMessage(error.code);\r\n    toast.error(errorMessage);\r\n    console.error(\"Google sign-in error:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Logout\r\nexport const logout = async () => {\r\n  try {\r\n    await signOut(auth);\r\n    toast.success(\"Logged out successfully\");\r\n    return true;\r\n  } catch (error) {\r\n    toast.error(\"Logout failed\");\r\n    console.error(\"Logout error:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Auth State Listener\r\nexport const onAuthChange = (callback) => {\r\n  return onAuthStateChanged(auth, (user) => {\r\n    callback(user);\r\n  });\r\n};\r\n\r\n// Error Message Handler\r\nconst getAuthErrorMessage = (code) => {\r\n  switch(code) {\r\n    case \"auth/invalid-email\":\r\n      return \"Invalid email format\";\r\n    case \"auth/user-disabled\":\r\n      return \"Account disabled\";\r\n    case \"auth/user-not-found\":\r\n      return \"Email not found\";\r\n    case \"auth/wrong-password\":\r\n      return \"Incorrect password\";\r\n    case \"auth/popup-closed-by-user\":\r\n      return \"Google sign-in cancelled\";\r\n    case \"auth/account-exists-with-different-credential\":\r\n      return \"Account exists with different login method\";\r\n    case \"auth/network-request-failed\":\r\n      return \"Network error. Check your connection\";\r\n    case \"auth/too-many-requests\":\r\n      return \"Too many attempts. Try again later\";\r\n    default:\r\n      return \"Authentication failed. Please try again\";\r\n  }\r\n};"],"mappings":"AAAA,SAASA,IAAI,QAAQ,aAAa;AAClC,SACEC,0BAA0B,EAC1BC,OAAO,EACPC,kBAAkB,EAClBC,kBAAkB,EAClBC,eAAe,QACV,eAAe;AACtB,SAASC,KAAK,QAAQ,gBAAgB;;AAEtC;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAMC,cAAc,GAAG,MAAMT,0BAA0B,CAACD,IAAI,EAAEQ,KAAK,EAAEC,QAAQ,CAAC;IAC9E,IAAIC,cAAc,CAACC,IAAI,EAAE;MACvBL,KAAK,CAACM,OAAO,CAAC,mBAAmB,CAAC;MAClC,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMC,YAAY,GAAGC,mBAAmB,CAACF,KAAK,CAACG,IAAI,CAAC;IACpDV,KAAK,CAACO,KAAK,CAACC,YAAY,CAAC;IACzBG,OAAO,CAACJ,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,IAAIf,kBAAkB,CAAC,CAAC;IACzC,MAAMgB,MAAM,GAAG,MAAMf,eAAe,CAACL,IAAI,EAAEmB,QAAQ,CAAC;IACpD,IAAIC,MAAM,CAACT,IAAI,EAAE;MACfL,KAAK,CAACM,OAAO,CAAC,0BAA0B,CAAC;MACzC,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMC,YAAY,GAAGC,mBAAmB,CAACF,KAAK,CAACG,IAAI,CAAC;IACpDV,KAAK,CAACO,KAAK,CAACC,YAAY,CAAC;IACzBG,OAAO,CAACJ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACF,MAAMnB,OAAO,CAACF,IAAI,CAAC;IACnBM,KAAK,CAACM,OAAO,CAAC,yBAAyB,CAAC;IACxC,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,KAAK,CAACO,KAAK,CAAC,eAAe,CAAC;IAC5BI,OAAO,CAACJ,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,YAAY,GAAIC,QAAQ,IAAK;EACxC,OAAOpB,kBAAkB,CAACH,IAAI,EAAGW,IAAI,IAAK;IACxCY,QAAQ,CAACZ,IAAI,CAAC;EAChB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMI,mBAAmB,GAAIC,IAAI,IAAK;EACpC,QAAOA,IAAI;IACT,KAAK,oBAAoB;MACvB,OAAO,sBAAsB;IAC/B,KAAK,oBAAoB;MACvB,OAAO,kBAAkB;IAC3B,KAAK,qBAAqB;MACxB,OAAO,iBAAiB;IAC1B,KAAK,qBAAqB;MACxB,OAAO,oBAAoB;IAC7B,KAAK,2BAA2B;MAC9B,OAAO,0BAA0B;IACnC,KAAK,+CAA+C;MAClD,OAAO,4CAA4C;IACrD,KAAK,6BAA6B;MAChC,OAAO,sCAAsC;IAC/C,KAAK,wBAAwB;MAC3B,OAAO,oCAAoC;IAC7C;MACE,OAAO,yCAAyC;EACpD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}