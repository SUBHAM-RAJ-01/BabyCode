{"ast":null,"code":"import { auth } from \"../firebase\";\nimport { signInWithEmailAndPassword, signOut, onAuthStateChanged, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nexport const login = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return userCredential.user;\n  } catch (error) {\n    throw new Error(getFirebaseErrorMessage(error.code));\n  }\n};\nexport const loginWithGoogle = async () => {\n  const provider = new GoogleAuthProvider();\n  try {\n    const result = await signInWithPopup(auth, provider);\n    return result.user;\n  } catch (error) {\n    throw new Error(getFirebaseErrorMessage(error.code));\n  }\n};\n\n// Helper function for user-friendly error messages\nconst getFirebaseErrorMessage = code => {\n  switch (code) {\n    case 'auth/invalid-email':\n      return 'Invalid email address';\n    case 'auth/user-disabled':\n      return 'Account disabled';\n    case 'auth/user-not-found':\n      return 'No account found with this email';\n    case 'auth/wrong-password':\n      return 'Incorrect password';\n    case 'auth/popup-closed-by-user':\n      return 'Google sign-in was cancelled';\n    default:\n      return 'Login failed. Please try again.';\n  }\n};\n\n// ... keep existing logout and onAuthChange functions ...","map":{"version":3,"names":["auth","signInWithEmailAndPassword","signOut","onAuthStateChanged","GoogleAuthProvider","signInWithPopup","login","email","password","userCredential","user","error","Error","getFirebaseErrorMessage","code","loginWithGoogle","provider","result"],"sources":["C:/Users/srajp/Desktop/BabyCode/src/components/LoginForm.js"],"sourcesContent":["import { auth } from \"../firebase\";\r\nimport { \r\n  signInWithEmailAndPassword, \r\n  signOut,\r\n  onAuthStateChanged,\r\n  GoogleAuthProvider,\r\n  signInWithPopup \r\n} from \"firebase/auth\";\r\n\r\nexport const login = async (email, password) => {\r\n  try {\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    return userCredential.user;\r\n  } catch (error) {\r\n    throw new Error(getFirebaseErrorMessage(error.code));\r\n  }\r\n};\r\n\r\nexport const loginWithGoogle = async () => {\r\n  const provider = new GoogleAuthProvider();\r\n  try {\r\n    const result = await signInWithPopup(auth, provider);\r\n    return result.user;\r\n  } catch (error) {\r\n    throw new Error(getFirebaseErrorMessage(error.code));\r\n  }\r\n};\r\n\r\n// Helper function for user-friendly error messages\r\nconst getFirebaseErrorMessage = (code) => {\r\n  switch(code) {\r\n    case 'auth/invalid-email':\r\n      return 'Invalid email address';\r\n    case 'auth/user-disabled':\r\n      return 'Account disabled';\r\n    case 'auth/user-not-found':\r\n      return 'No account found with this email';\r\n    case 'auth/wrong-password':\r\n      return 'Incorrect password';\r\n    case 'auth/popup-closed-by-user':\r\n      return 'Google sign-in was cancelled';\r\n    default:\r\n      return 'Login failed. Please try again.';\r\n  }\r\n};\r\n\r\n// ... keep existing logout and onAuthChange functions ..."],"mappings":"AAAA,SAASA,IAAI,QAAQ,aAAa;AAClC,SACEC,0BAA0B,EAC1BC,OAAO,EACPC,kBAAkB,EAClBC,kBAAkB,EAClBC,eAAe,QACV,eAAe;AAEtB,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAMC,cAAc,GAAG,MAAMR,0BAA0B,CAACD,IAAI,EAAEO,KAAK,EAAEC,QAAQ,CAAC;IAC9E,OAAOC,cAAc,CAACC,IAAI;EAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAACC,uBAAuB,CAACF,KAAK,CAACG,IAAI,CAAC,CAAC;EACtD;AACF,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAMC,QAAQ,GAAG,IAAIZ,kBAAkB,CAAC,CAAC;EACzC,IAAI;IACF,MAAMa,MAAM,GAAG,MAAMZ,eAAe,CAACL,IAAI,EAAEgB,QAAQ,CAAC;IACpD,OAAOC,MAAM,CAACP,IAAI;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAACC,uBAAuB,CAACF,KAAK,CAACG,IAAI,CAAC,CAAC;EACtD;AACF,CAAC;;AAED;AACA,MAAMD,uBAAuB,GAAIC,IAAI,IAAK;EACxC,QAAOA,IAAI;IACT,KAAK,oBAAoB;MACvB,OAAO,uBAAuB;IAChC,KAAK,oBAAoB;MACvB,OAAO,kBAAkB;IAC3B,KAAK,qBAAqB;MACxB,OAAO,kCAAkC;IAC3C,KAAK,qBAAqB;MACxB,OAAO,oBAAoB;IAC7B,KAAK,2BAA2B;MAC9B,OAAO,8BAA8B;IACvC;MACE,OAAO,iCAAiC;EAC5C;AACF,CAAC;;AAED","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}