{"ast":null,"code":"import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const LoadingSpinner=()=>{return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'center',height:'100px'},children:[/*#__PURE__*/_jsx(\"div\",{style:{display:'inline-block',width:'20px',height:'20px',border:'3px solid rgba(255,255,255,0.3)',borderRadius:'50%',borderTopColor:'white',animation:'spin 1s ease-in-out infinite'}}),/*#__PURE__*/_jsx(\"style\",{children:`\n          @keyframes spin {\n            to { transform: rotate(360deg); }\n          }\n        `})]});};","map":{"version":3,"names":["LoadingSpinner","_jsxs","style","display","justifyContent","alignItems","height","children","_jsx","width","border","borderRadius","borderTopColor","animation"],"sources":["C:/Users/srajp/Desktop/BabyCode/src/components/LoadingSpinner.js"],"sourcesContent":["export const LoadingSpinner = () => {\r\n    return (\r\n      <div style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '100px'\r\n      }}>\r\n        <div style={{\r\n          display: 'inline-block',\r\n          width: '20px',\r\n          height: '20px',\r\n          border: '3px solid rgba(255,255,255,0.3)',\r\n          borderRadius: '50%',\r\n          borderTopColor: 'white',\r\n          animation: 'spin 1s ease-in-out infinite'\r\n        }}></div>\r\n        <style>{`\r\n          @keyframes spin {\r\n            to { transform: rotate(360deg); }\r\n          }\r\n        `}</style>\r\n      </div>\r\n    );\r\n  };"],"mappings":"yDAAA,MAAO,MAAM,CAAAA,cAAc,CAAGA,CAAA,GAAM,CAChC,mBACEC,KAAA,QAAKC,KAAK,CAAE,CACVC,OAAO,CAAE,MAAM,CACfC,cAAc,CAAE,QAAQ,CACxBC,UAAU,CAAE,QAAQ,CACpBC,MAAM,CAAE,OACV,CAAE,CAAAC,QAAA,eACAC,IAAA,QAAKN,KAAK,CAAE,CACVC,OAAO,CAAE,cAAc,CACvBM,KAAK,CAAE,MAAM,CACbH,MAAM,CAAE,MAAM,CACdI,MAAM,CAAE,iCAAiC,CACzCC,YAAY,CAAE,KAAK,CACnBC,cAAc,CAAE,OAAO,CACvBC,SAAS,CAAE,8BACb,CAAE,CAAM,CAAC,cACTL,IAAA,UAAAD,QAAA,CAAQ;AAChB;AACA;AACA;AACA,SAAS,CAAQ,CAAC,EACP,CAAC,CAEV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}